// Generated by CoffeeScript 1.3.3
(function() {
  var Xhr,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Xhr = (function() {
    var _doJsonP, _isObject, _parseUrl;

    Xhr.readyState = 0;

    Xhr.status = null;

    _parseUrl = (function() {
      var a;
      a = document.createElement("a");
      return function(url) {
        a.href = url;
        return {
          host: a.host,
          hostname: a.hostname,
          pathname: a.pathname,
          port: a.port,
          protocol: a.protocol,
          search: a.search,
          hash: a.hash
        };
      };
    })();

    _isObject = function(obj) {
      return (!(obj.ownerDocument instanceof Object)) && (!(obj instanceof Date)) && (!(obj instanceof RegExp)) && (!(obj instanceof Function)) && (!(obj instanceof String)) && (!(obj instanceof Boolean)) && (!(obj instanceof Number)) && obj instanceof Object;
    };

    _doJsonP = function(url) {
      var script;
      script = document.createElement("script");
      script.type = 'text/javascript';
      script.src = url;
      return document.body.appendChild(script);
    };

    Xhr.prototype.jpcb = function() {};

    function Xhr() {
      var _callbackFunctions, _doCallbackFor, _setCallbackFor;
      _callbackFunctions = {};
      _setCallbackFor = function(callbackFor, callbackFunction) {
        if (typeof callbackFor === 'string' && typeof callbackFunction === 'function') {
          return _callbackFunctions[callbackFor] = callbackFunction;
        }
      };
      _doCallbackFor = function(callbackFor) {
        if (typeof _callbackFunctions[callbackFor] === 'function') {
          return _callbackFunctions[callbackFor](arguments[1], arguments[2], arguments[3]);
        }
      };
      this._ = {
        xhr: null,
        cors: null,
        xhrType: 'form',
        doCallbackFor: _doCallbackFor,
        setCallbackFor: _setCallbackFor
      };
    }

    Xhr.prototype.createXhrObject = function() {
      var _this, _validStatus;
      _validStatus = [200, 201, 204, 304];
      this._.cors = false;
      if (window.XDomainRequest) {
        this._.xhr = new XDomainRequest();
        this._.cors = true;
      } else if (window.XMLHttpRequest) {
        this._.xhr = new XMLHttpRequest();
        if ("withCredentials" in this._.xhr) {
          this._.cors = true;
        }
      } else if (window.ActiveXObject) {
        try {
          this._.xhr = new ActiveXObject("MSXML2.XMLHTTP.3.0");
        } catch (error) {
          this._.xhr = null;
          throw Error(error);
        }
      }
      _this = this;
      this._.xhr.onreadystatechange = function() {
        var _ref;
        _this.readyState = _this._.xhr.readyState;
        _this._.doCallbackFor('readystatechange', _this._.xhr);
        switch (_this._.xhr.readyState) {
          case 0:
          case 1:
            return _this._.doCallbackFor('loadstart', _this._.xhr);
          case 2:
            return _this._.doCallbackFor('progress', _this._.xhr);
          case 3:
            return _this._.doCallbackFor('onload', _this._.xhr);
          case 4:
            try {
              if (_ref = _this._.xhr.status, __indexOf.call(_validStatus, _ref) >= 0) {
                _this._.doCallbackFor('success', _this._.xhr.responseText, _this._.xhr.status, _this._.xhr);
              } else {
                _this._.doCallbackFor('error', _this._.xhr.responseText, _this._.xhr.status, _this._.xhr);
              }
            } catch (error) {
              throw Error(error);
            }
            _this._.doCallbackFor('loadend', _this._.xhr.responseText, _this._.xhr.status, _this._.xhr);
            return _this._.xhr = null;
          default:
            throw Error("Unsupported readystate (" + _this._.xhr.readyState + ") received.");
        }
      };
      this._.xhr.ontimeout = function() {
        return _this._.doCallbackFor('timeout', _this._.xhr);
      };
      this._.xhr.onabort = function() {
        return _this._.doCallbackFor('abort', _this._.xhr);
      };
      return this._.xhr;
    };

    Xhr.prototype._doAjaxCall = function(url, method, data) {
      var crossDomain, currentUrl, getContentType, urlObj, xhrObj;
      if (method == null) {
        method = "GET";
      }
      if (data == null) {
        data = null;
      }
      if (url === void 0) {
        throw Error("URL required");
      }
      currentUrl = window.location;
      urlObj = _parseUrl(url);
      xhrObj = this.createXhrObject();
      getContentType = function(type) {
        var contentType;
        if (type == null) {
          type = "form";
        }
        contentType = 'application/x-www-form-urlencoded';
        switch (type.toLowerCase()) {
          case 'html':
            contentType = 'text/html';
            break;
          case 'json':
            contentType = 'application/json';
            break;
          case 'jsonp':
            contentType = 'application/javascript';
            break;
          case 'xml':
            contentType = 'application/xml';
            break;
          default:
            contentType = 'application/x-www-form-urlencoded';
        }
        return contentType;
      };
      if (urlObj.host === currentUrl.host && urlObj.protocol === currentUrl.protocol && urlObj.port === currentUrl.port) {
        crossDomain = false;
      } else {
        crossDomain = true;
      }
      if (crossDomain === false || this._.cors === true) {
        xhrObj.open(method, url, true);
        if (this._.cors) {
          xhrObj.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        }
        if (data) {
          if (typeof data === 'string' && window.JSON) {
            try {
              data = JSON.parse(data);
              this.setType('json');
            } catch (e) {

            }
          }
          if (this._.xhrType === 'json' && typeof data === "object" && window.JSON) {
            data = JSON.stringify(data);
            this.setType('json');
          } else if (typeof data !== "string") {
            xhrObj.setRequestHeader('Content-Type', getContentType('form'));
            data = this.serialize(data);
            this.setType('form');
          }
        }
        xhrObj.setRequestHeader('Content-Type', getContentType(this._.xhrType));
        return xhrObj.send(data);
      } else {
        data = this.serialize(data);
        _doJsonP("" + data + "&callback=");
        throw Error("crossDomain Error");
      }
    };

    Xhr.prototype.serialize = function(obj, keyed, prefix) {
      var index, result, temp;
      if (prefix == null) {
        prefix = '';
      }
      if (!_isObject(obj)) {
        return prefix + encodeURIComponent(obj);
      }
      result = "";
      temp = "";
      for (index in obj) {
        if (!obj.hasOwnProperty(index)) {
          continue;
        }
        temp = (keyed ? keyed + "[" + encodeURIComponent(index) + "]" : encodeURIComponent(index));
        result += this.serialize(obj[index], temp, "&" + temp + "=");
      }
      return result.substring(1);
    };

    Xhr.prototype.setType = function(type) {
      var _validTypes;
      _validTypes = ['form', 'html', 'json', 'jsonp', 'xml'];
      type = type.toLowerCase();
      if (__indexOf.call(_validTypes, type) < 0) {
        throw Error("Unsupported type (" + type + ")");
      }
      return this._.xhrType = type;
    };

    Xhr.prototype.cors = function() {
      if (this._.cors === null) {
        this.createXhrObject();
      }
      return this._.cors;
    };

    Xhr.prototype.abort = function() {
      try {
        this._.xhr.abort();
        this._.xhr.onreadystatechange = function() {};
        this.readyState = 0;
      } catch (error) {

      }
      this.ononabort();
      return this;
    };

    Xhr.prototype.call = function(url, method, data) {
      this._doAjaxCall(url, method, data);
      return this;
    };

    Xhr.prototype.head = function(url) {
      this._doAjaxCall(url, "HEAD");
      return this;
    };

    Xhr.prototype.options = function(url) {
      this._doAjaxCall(url, "OPTIONS");
      return this;
    };

    Xhr.prototype.get = function(url) {
      this._doAjaxCall(url, "GET");
      return this;
    };

    Xhr.prototype.put = function(url, data) {
      this._doAjaxCall(url, "PUT", data);
      return this;
    };

    Xhr.prototype.post = function(url, data) {
      this._doAjaxCall(url, "POST", data);
      return this;
    };

    Xhr.prototype["delete"] = function(url) {
      this._doAjaxCall(url, "DELETE");
      return this;
    };

    Xhr.prototype.jsonp = function(url) {
      _doJsonP(url);
      return this;
    };

    Xhr.prototype.onreadystatechange = function(callback) {
      this._.setCallbackFor('readystatechange', callback);
      return this;
    };

    Xhr.prototype.onloadstart = function(callback) {
      this._.setCallbackFor('loadstart', callback);
      return this;
    };

    Xhr.prototype.onprogress = function(callback) {
      this._.setCallbackFor('progress', callback);
      return this;
    };

    Xhr.prototype.onload = function(callback) {
      this._.setCallbackFor('load', callback);
      return this;
    };

    Xhr.prototype.onerror = function(callback) {
      this._.setCallbackFor('error', callback);
      return this;
    };

    Xhr.prototype.onsuccess = function(callback) {
      this._.setCallbackFor('success', callback);
      return this;
    };

    Xhr.prototype.onloadend = function(callback) {
      this._.setCallbackFor('loadend', callback);
      return this;
    };

    Xhr.prototype.ontimeout = function(callback) {
      this._.setCallbackFor('timeout', callback);
      return this;
    };

    Xhr.prototype.onabort = function(callback) {
      this._.setCallbackFor('abort', callback);
      return this;
    };

    return Xhr;

  })();

  window.Xhr = Xhr;

}).call(this);
